---

- hosts: localhost
  connection: local
  vars:
    - proxmox_creation: false
    - proxmox_hostname: Atlassian-{{ to_email | regex_search('([^@]+)') }}-{{'%d-%b'| strftime(ansible_date_time.epoch)}}
  roles:
    - { role: proxmox, when: proxmox_creation == 'true' }

- hosts: localhost
  connection: local 
  tasks:
    - name: Clean postgres_hosts
      ansible.builtin.known_hosts:
        state: absent
        name: "{{ hostvars[item].ansible_host if hostvars[item].ansible_host is defined else item }}"
      with_items: "{{ groups['postgres_hosts'] }}"
      ignore_errors: true

    - name: Clean confluence_hosts
      ansible.builtin.known_hosts:
        state: absent
        name: "{{ hostvars[item].ansible_host if hostvars[item].ansible_host is defined else item }}"
      with_items: "{{ groups['confluence_hosts'] }}"
      ignore_errors: true

    - name: Clean proxmox_hosts
      ansible.builtin.known_hosts:
        state: absent
        name: "{{ hostvars[item].ansible_host if hostvars[item].ansible_host is defined else item }}"
      with_items: "{{ groups['proxmox_hosts'] }}"
      ignore_errors: true

    - name: verify pip3
      command: which pip3
      register: pip3_validation
      ignore_errors: true

    - name: download pip3
      command: curl -O https://bootstrap.pypa.io/get-pip.py
      when: pip3_validation.failed|bool == true
      ignore_errors: true

    - name: install pip3
      command: python3 get-pip.py
      when: pip3_validation.failed|bool == true
      ignore_errors: true

    - name: Install jmespath python package
      command: python3 -m pip install jmespath


- hosts: proxmox_hosts
  gather_facts: true
  become: yes
  tasks:
    - block:
        - set_fact:
            ssh_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
            ssh_user: "{{ to_email | regex_search('([^@]+)') }}"
            db_engine: "{{ applications | select('search','mysql|postgresql') | map('split', ':') | map(attribute=0) | first | default('')}}"
            db_version: "{{ applications | select('search','mysql|postgresql') | map('split', ':') | map(attribute=1) | first | default('')}}"
            database_username: "{{ to_email | regex_search('([^@]+)') }}"
            database_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
            jira_version: "{{ applications | select('search','jira') | map('split', ':') | map(attribute=1) | first | default('')}}"
            confluence_version: "{{ applications | select('search','confluence') | map('split', ':') | map(attribute=1) | first | default('')}}"
        - debug:
            msg: "{{ db_engine }} and {{ db_engine| type_debug }}"
        - name: Add user to VM
          include_role:
            name: proxmox
            tasks_from: add_user
        - name: Install Postgresql
          vars: 
            postgresql_version: "{{ db_version }}"
          include_role:
            name: postgres
          when: db_engine == "postgresql"
        - name: Install Mysql
          vars:
            mysql_user_name: "{{ database_username }}"
            mysql_user_password: "{{ database_password }}"
            version_mysql_install: "{{ db_version }}"
          include_role:
            name: mysql
          when: db_engine == "mysql"

        - name: Install Confluence
          vars:
            confluence_database_engine: "{{ db_engine }}"
            confluence_database_engine_version: "{{ db_version }}"
            confluence_database_username: "{{ database_username }}"
            confluence_database_password: "{{ database_password }}"
            confluence_database_name: confluence
          include_role:
            name: confluence
          when: confluence_version != ""

        - name: Install java
          include_role:
            name: java

        - name: Install jira
          vars:
            jira_database_engine: "{{ db_engine }}"
            jira_database_engine_version: "{{ db_version }}"
            jira_database_username:  "{{ database_username }}"
            jira_database_password: "{{ database_password }}"
            jira_database_name: jira
          include_role:
            name: jira
          when: jira_version != ""
        # - name: Send mail
        #   vars:
        #     Issuekey: abc
        #     mail: "confluence"
        #     confluence_database_engine: "{{ db_engine }}"
        #     confluence_database_engine_version: "{{ db_version }}"
        #     confluence_database_username: "{{ database_username }}"
        #     confluence_database_password: "{{ database_password }}"
        #   include_role:
        #     name: proxmox
        #     tasks_from: sending_mail
        - name: Send webhook
          include_role:
            name: proxmox
            tasks_from: return_webhook
      rescue: 
        - name: Return webhook
          include_role:
            name: nginx-proxy
            tasks_from: error_return_webhook  
